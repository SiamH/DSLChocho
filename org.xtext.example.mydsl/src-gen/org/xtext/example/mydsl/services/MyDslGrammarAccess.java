/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsTypesParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	{Model} elements+=Types*;
		public ParserRule getRule() { return rule; }

		//{Model} elements+=Types*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//elements+=Types*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Types
		public RuleCall getElementsTypesParserRuleCall_1_0() { return cElementsTypesParserRuleCall_1_0; }
	}

	public class TypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNotEqualParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cShowAllParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSolveParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEqualPlusParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEqualMinusParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNotEqualPlusParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cNotEqualMinusParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLogParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Types:
		//	Variable | Equal | NotEqual | ShowAll | Solve | EqualPlus | EqualMinus | NotEqualPlus | NotEqualMinus | Log;
		public ParserRule getRule() { return rule; }

		//Variable | Equal | NotEqual | ShowAll | Solve | EqualPlus | EqualMinus | NotEqualPlus | NotEqualMinus | Log
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Equal
		public RuleCall getEqualParserRuleCall_1() { return cEqualParserRuleCall_1; }

		//NotEqual
		public RuleCall getNotEqualParserRuleCall_2() { return cNotEqualParserRuleCall_2; }

		//ShowAll
		public RuleCall getShowAllParserRuleCall_3() { return cShowAllParserRuleCall_3; }

		//Solve
		public RuleCall getSolveParserRuleCall_4() { return cSolveParserRuleCall_4; }

		//EqualPlus
		public RuleCall getEqualPlusParserRuleCall_5() { return cEqualPlusParserRuleCall_5; }

		//EqualMinus
		public RuleCall getEqualMinusParserRuleCall_6() { return cEqualMinusParserRuleCall_6; }

		//NotEqualPlus
		public RuleCall getNotEqualPlusParserRuleCall_7() { return cNotEqualPlusParserRuleCall_7; }

		//NotEqualMinus
		public RuleCall getNotEqualMinusParserRuleCall_8() { return cNotEqualMinusParserRuleCall_8; }

		//Log
		public RuleCall getLogParserRuleCall_9() { return cLogParserRuleCall_9; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeINTTerminalRuleCall_5_0 = (RuleCall)cRangeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Variable:
		//	{Variable} "var" "(" name=ID "," range=INT ")";
		public ParserRule getRule() { return rule; }

		//{Variable} "var" "(" name=ID "," range=INT ")"
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//range=INT
		public Assignment getRangeAssignment_5() { return cRangeAssignment_5; }

		//INT
		public RuleCall getRangeINTTerminalRuleCall_5_0() { return cRangeINTTerminalRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1VariableCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1VariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1VariableCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVar2VariableCrossReference_4_0 = (CrossReference)cVar2Assignment_4.eContents().get(0);
		private final RuleCall cVar2VariableIDTerminalRuleCall_4_0_1 = (RuleCall)cVar2VariableCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Equal:
		//	"equal" "(" var1=[Variable] "," var2=[Variable] ")";
		public ParserRule getRule() { return rule; }

		//"equal" "(" var1=[Variable] "," var2=[Variable] ")"
		public Group getGroup() { return cGroup; }

		//"equal"
		public Keyword getEqualKeyword_0() { return cEqualKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=[Variable]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//[Variable]
		public CrossReference getVar1VariableCrossReference_2_0() { return cVar1VariableCrossReference_2_0; }

		//ID
		public RuleCall getVar1VariableIDTerminalRuleCall_2_0_1() { return cVar1VariableIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=[Variable]
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//[Variable]
		public CrossReference getVar2VariableCrossReference_4_0() { return cVar2VariableCrossReference_4_0; }

		//ID
		public RuleCall getVar2VariableIDTerminalRuleCall_4_0_1() { return cVar2VariableIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class EqualPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualplusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1VariableCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1VariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1VariableCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVar2VariableCrossReference_4_0 = (CrossReference)cVar2Assignment_4.eContents().get(0);
		private final RuleCall cVar2VariableIDTerminalRuleCall_4_0_1 = (RuleCall)cVar2VariableCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRangeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRangeINTTerminalRuleCall_6_0 = (RuleCall)cRangeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EqualPlus:
		//	"equalplus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
		public ParserRule getRule() { return rule; }

		//"equalplus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")"
		public Group getGroup() { return cGroup; }

		//"equalplus"
		public Keyword getEqualplusKeyword_0() { return cEqualplusKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=[Variable]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//[Variable]
		public CrossReference getVar1VariableCrossReference_2_0() { return cVar1VariableCrossReference_2_0; }

		//ID
		public RuleCall getVar1VariableIDTerminalRuleCall_2_0_1() { return cVar1VariableIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=[Variable]
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//[Variable]
		public CrossReference getVar2VariableCrossReference_4_0() { return cVar2VariableCrossReference_4_0; }

		//ID
		public RuleCall getVar2VariableIDTerminalRuleCall_4_0_1() { return cVar2VariableIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//range=INT
		public Assignment getRangeAssignment_6() { return cRangeAssignment_6; }

		//INT
		public RuleCall getRangeINTTerminalRuleCall_6_0() { return cRangeINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class EqualMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualminusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1VariableCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1VariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1VariableCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVar2VariableCrossReference_4_0 = (CrossReference)cVar2Assignment_4.eContents().get(0);
		private final RuleCall cVar2VariableIDTerminalRuleCall_4_0_1 = (RuleCall)cVar2VariableCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRangeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRangeINTTerminalRuleCall_6_0 = (RuleCall)cRangeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EqualMinus:
		//	"equalminus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
		public ParserRule getRule() { return rule; }

		//"equalminus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")"
		public Group getGroup() { return cGroup; }

		//"equalminus"
		public Keyword getEqualminusKeyword_0() { return cEqualminusKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=[Variable]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//[Variable]
		public CrossReference getVar1VariableCrossReference_2_0() { return cVar1VariableCrossReference_2_0; }

		//ID
		public RuleCall getVar1VariableIDTerminalRuleCall_2_0_1() { return cVar1VariableIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=[Variable]
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//[Variable]
		public CrossReference getVar2VariableCrossReference_4_0() { return cVar2VariableCrossReference_4_0; }

		//ID
		public RuleCall getVar2VariableIDTerminalRuleCall_4_0_1() { return cVar2VariableIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//range=INT
		public Assignment getRangeAssignment_6() { return cRangeAssignment_6; }

		//INT
		public RuleCall getRangeINTTerminalRuleCall_6_0() { return cRangeINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class NotEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotequalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1VariableCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1VariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1VariableCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVar2VariableCrossReference_4_0 = (CrossReference)cVar2Assignment_4.eContents().get(0);
		private final RuleCall cVar2VariableIDTerminalRuleCall_4_0_1 = (RuleCall)cVar2VariableCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NotEqual:
		//	"notequal" "(" var1=[Variable] "," var2=[Variable] ")";
		public ParserRule getRule() { return rule; }

		//"notequal" "(" var1=[Variable] "," var2=[Variable] ")"
		public Group getGroup() { return cGroup; }

		//"notequal"
		public Keyword getNotequalKeyword_0() { return cNotequalKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=[Variable]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//[Variable]
		public CrossReference getVar1VariableCrossReference_2_0() { return cVar1VariableCrossReference_2_0; }

		//ID
		public RuleCall getVar1VariableIDTerminalRuleCall_2_0_1() { return cVar1VariableIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=[Variable]
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//[Variable]
		public CrossReference getVar2VariableCrossReference_4_0() { return cVar2VariableCrossReference_4_0; }

		//ID
		public RuleCall getVar2VariableIDTerminalRuleCall_4_0_1() { return cVar2VariableIDTerminalRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class NotEqualPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotEqualPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotequalplusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1VariableCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1VariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1VariableCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVar2VariableCrossReference_4_0 = (CrossReference)cVar2Assignment_4.eContents().get(0);
		private final RuleCall cVar2VariableIDTerminalRuleCall_4_0_1 = (RuleCall)cVar2VariableCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRangeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRangeINTTerminalRuleCall_6_0 = (RuleCall)cRangeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NotEqualPlus:
		//	"notequalplus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
		public ParserRule getRule() { return rule; }

		//"notequalplus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")"
		public Group getGroup() { return cGroup; }

		//"notequalplus"
		public Keyword getNotequalplusKeyword_0() { return cNotequalplusKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=[Variable]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//[Variable]
		public CrossReference getVar1VariableCrossReference_2_0() { return cVar1VariableCrossReference_2_0; }

		//ID
		public RuleCall getVar1VariableIDTerminalRuleCall_2_0_1() { return cVar1VariableIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=[Variable]
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//[Variable]
		public CrossReference getVar2VariableCrossReference_4_0() { return cVar2VariableCrossReference_4_0; }

		//ID
		public RuleCall getVar2VariableIDTerminalRuleCall_4_0_1() { return cVar2VariableIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//range=INT
		public Assignment getRangeAssignment_6() { return cRangeAssignment_6; }

		//INT
		public RuleCall getRangeINTTerminalRuleCall_6_0() { return cRangeINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class NotEqualMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotEqualMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotequalminusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1VariableCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1VariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1VariableCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVar2VariableCrossReference_4_0 = (CrossReference)cVar2Assignment_4.eContents().get(0);
		private final RuleCall cVar2VariableIDTerminalRuleCall_4_0_1 = (RuleCall)cVar2VariableCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRangeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRangeINTTerminalRuleCall_6_0 = (RuleCall)cRangeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NotEqualMinus:
		//	"notequalminus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
		public ParserRule getRule() { return rule; }

		//"notequalminus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")"
		public Group getGroup() { return cGroup; }

		//"notequalminus"
		public Keyword getNotequalminusKeyword_0() { return cNotequalminusKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var1=[Variable]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }

		//[Variable]
		public CrossReference getVar1VariableCrossReference_2_0() { return cVar1VariableCrossReference_2_0; }

		//ID
		public RuleCall getVar1VariableIDTerminalRuleCall_2_0_1() { return cVar1VariableIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//var2=[Variable]
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }

		//[Variable]
		public CrossReference getVar2VariableCrossReference_4_0() { return cVar2VariableCrossReference_4_0; }

		//ID
		public RuleCall getVar2VariableIDTerminalRuleCall_4_0_1() { return cVar2VariableIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//range=INT
		public Assignment getRangeAssignment_6() { return cRangeAssignment_6; }

		//INT
		public RuleCall getRangeINTTerminalRuleCall_6_0() { return cRangeINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class ShowAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeBOOLEANTerminalRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ShowAll:
		//	"showall" "(" range=BOOLEAN ")";
		public ParserRule getRule() { return rule; }

		//"showall" "(" range=BOOLEAN ")"
		public Group getGroup() { return cGroup; }

		//"showall"
		public Keyword getShowallKeyword_0() { return cShowallKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//range=BOOLEAN
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//BOOLEAN
		public RuleCall getRangeBOOLEANTerminalRuleCall_2_0() { return cRangeBOOLEANTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Log:
		//	"log" "(" str=STRING ")";
		public ParserRule getRule() { return rule; }

		//"log" "(" str=STRING ")"
		public Group getGroup() { return cGroup; }

		//"log"
		public Keyword getLogKeyword_0() { return cLogKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//str=STRING
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_2_0() { return cStrSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SolveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Solve");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeBOOLEANTerminalRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Solve:
		//	"solve" "(" range=BOOLEAN ")";
		public ParserRule getRule() { return rule; }

		//"solve" "(" range=BOOLEAN ")"
		public Group getGroup() { return cGroup; }

		//"solve"
		public Keyword getSolveKeyword_0() { return cSolveKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//range=BOOLEAN
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//BOOLEAN
		public RuleCall getRangeBOOLEANTerminalRuleCall_2_0() { return cRangeBOOLEANTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final TypesElements pTypes;
	private final VariableElements pVariable;
	private final EqualElements pEqual;
	private final EqualPlusElements pEqualPlus;
	private final EqualMinusElements pEqualMinus;
	private final NotEqualElements pNotEqual;
	private final NotEqualPlusElements pNotEqualPlus;
	private final NotEqualMinusElements pNotEqualMinus;
	private final ShowAllElements pShowAll;
	private final LogElements pLog;
	private final SolveElements pSolve;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTypes = new TypesElements();
		this.pVariable = new VariableElements();
		this.pEqual = new EqualElements();
		this.pEqualPlus = new EqualPlusElements();
		this.pEqualMinus = new EqualMinusElements();
		this.pNotEqual = new NotEqualElements();
		this.pNotEqualPlus = new NotEqualPlusElements();
		this.pNotEqualMinus = new NotEqualMinusElements();
		this.pShowAll = new ShowAllElements();
		this.pLog = new LogElements();
		this.pSolve = new SolveElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} elements+=Types*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Types:
	//	Variable | Equal | NotEqual | ShowAll | Solve | EqualPlus | EqualMinus | NotEqualPlus | NotEqualMinus | Log;
	public TypesElements getTypesAccess() {
		return pTypes;
	}
	
	public ParserRule getTypesRule() {
		return getTypesAccess().getRule();
	}

	//Variable:
	//	{Variable} "var" "(" name=ID "," range=INT ")";
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Equal:
	//	"equal" "(" var1=[Variable] "," var2=[Variable] ")";
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}

	//EqualPlus:
	//	"equalplus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
	public EqualPlusElements getEqualPlusAccess() {
		return pEqualPlus;
	}
	
	public ParserRule getEqualPlusRule() {
		return getEqualPlusAccess().getRule();
	}

	//EqualMinus:
	//	"equalminus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
	public EqualMinusElements getEqualMinusAccess() {
		return pEqualMinus;
	}
	
	public ParserRule getEqualMinusRule() {
		return getEqualMinusAccess().getRule();
	}

	//NotEqual:
	//	"notequal" "(" var1=[Variable] "," var2=[Variable] ")";
	public NotEqualElements getNotEqualAccess() {
		return pNotEqual;
	}
	
	public ParserRule getNotEqualRule() {
		return getNotEqualAccess().getRule();
	}

	//NotEqualPlus:
	//	"notequalplus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
	public NotEqualPlusElements getNotEqualPlusAccess() {
		return pNotEqualPlus;
	}
	
	public ParserRule getNotEqualPlusRule() {
		return getNotEqualPlusAccess().getRule();
	}

	//NotEqualMinus:
	//	"notequalminus" "(" var1=[Variable] "," var2=[Variable] "," range=INT ")";
	public NotEqualMinusElements getNotEqualMinusAccess() {
		return pNotEqualMinus;
	}
	
	public ParserRule getNotEqualMinusRule() {
		return getNotEqualMinusAccess().getRule();
	}

	//ShowAll:
	//	"showall" "(" range=BOOLEAN ")";
	public ShowAllElements getShowAllAccess() {
		return pShowAll;
	}
	
	public ParserRule getShowAllRule() {
		return getShowAllAccess().getRule();
	}

	//Log:
	//	"log" "(" str=STRING ")";
	public LogElements getLogAccess() {
		return pLog;
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}

	//Solve:
	//	"solve" "(" range=BOOLEAN ")";
	public SolveElements getSolveAccess() {
		return pSolve;
	}
	
	public ParserRule getSolveRule() {
		return getSolveAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
