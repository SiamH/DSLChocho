/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsTypesParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Types");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleTypes
entryRuleTypes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypesRule()); }
	 iv_ruleTypes=ruleTypes 
	 { $current=$iv_ruleTypes.current; } 
	 EOF 
;

// Rule Types
ruleTypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getVariableParserRuleCall_0()); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getEqualParserRuleCall_1()); 
    }
    this_Equal_1=ruleEqual
    { 
        $current = $this_Equal_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getNotEqualParserRuleCall_2()); 
    }
    this_NotEqual_2=ruleNotEqual
    { 
        $current = $this_NotEqual_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getShowAllParserRuleCall_3()); 
    }
    this_ShowAll_3=ruleShowAll
    { 
        $current = $this_ShowAll_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getSolveParserRuleCall_4()); 
    }
    this_Solve_4=ruleSolve
    { 
        $current = $this_Solve_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getEqualPlusParserRuleCall_5()); 
    }
    this_EqualPlus_5=ruleEqualPlus
    { 
        $current = $this_EqualPlus_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getEqualMinusParserRuleCall_6()); 
    }
    this_EqualMinus_6=ruleEqualMinus
    { 
        $current = $this_EqualMinus_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getNotEqualPlusParserRuleCall_7()); 
    }
    this_NotEqualPlus_7=ruleNotEqualPlus
    { 
        $current = $this_NotEqualPlus_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getNotEqualMinusParserRuleCall_8()); 
    }
    this_NotEqualMinus_8=ruleNotEqualMinus
    { 
        $current = $this_NotEqualMinus_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypesAccess().getLogParserRuleCall_9()); 
    }
    this_Log_9=ruleLog
    { 
        $current = $this_Log_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableAccess().getVariableAction_0(),
            $current);
    }
)	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getVarKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getLeftParenthesisKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getCommaKeyword_4());
    }
(
(
		lv_range_5_0=RULE_INT
		{
			newLeafNode(lv_range_5_0, grammarAccess.getVariableAccess().getRangeINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"range",
        		lv_range_5_0, 
        		"INT");
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	 iv_ruleEqual=ruleEqual 
	 { $current=$iv_ruleEqual.current; } 
	 EOF 
;

// Rule Equal
ruleEqual returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='equal' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEqualAccess().getEqualKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEqualAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getEqualAccess().getVar1VariableCrossReference_2_0()); 
	}

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEqualAccess().getCommaKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getEqualAccess().getVar2VariableCrossReference_4_0()); 
	}

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEqualAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleEqualPlus
entryRuleEqualPlus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualPlusRule()); }
	 iv_ruleEqualPlus=ruleEqualPlus 
	 { $current=$iv_ruleEqualPlus.current; } 
	 EOF 
;

// Rule EqualPlus
ruleEqualPlus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='equalplus' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEqualPlusAccess().getEqualplusKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEqualPlusAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualPlusRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getEqualPlusAccess().getVar1VariableCrossReference_2_0()); 
	}

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEqualPlusAccess().getCommaKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualPlusRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getEqualPlusAccess().getVar2VariableCrossReference_4_0()); 
	}

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEqualPlusAccess().getCommaKeyword_5());
    }
(
(
		lv_range_6_0=RULE_INT
		{
			newLeafNode(lv_range_6_0, grammarAccess.getEqualPlusAccess().getRangeINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualPlusRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"range",
        		lv_range_6_0, 
        		"INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEqualPlusAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleEqualMinus
entryRuleEqualMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualMinusRule()); }
	 iv_ruleEqualMinus=ruleEqualMinus 
	 { $current=$iv_ruleEqualMinus.current; } 
	 EOF 
;

// Rule EqualMinus
ruleEqualMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='equalminus' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEqualMinusAccess().getEqualminusKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEqualMinusAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualMinusRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getEqualMinusAccess().getVar1VariableCrossReference_2_0()); 
	}

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEqualMinusAccess().getCommaKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualMinusRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getEqualMinusAccess().getVar2VariableCrossReference_4_0()); 
	}

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEqualMinusAccess().getCommaKeyword_5());
    }
(
(
		lv_range_6_0=RULE_INT
		{
			newLeafNode(lv_range_6_0, grammarAccess.getEqualMinusAccess().getRangeINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualMinusRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"range",
        		lv_range_6_0, 
        		"INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEqualMinusAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleNotEqual
entryRuleNotEqual returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEqualRule()); }
	 iv_ruleNotEqual=ruleNotEqual 
	 { $current=$iv_ruleNotEqual.current; } 
	 EOF 
;

// Rule NotEqual
ruleNotEqual returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='notequal' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotEqualAccess().getNotequalKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotEqualAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getNotEqualAccess().getVar1VariableCrossReference_2_0()); 
	}

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNotEqualAccess().getCommaKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getNotEqualAccess().getVar2VariableCrossReference_4_0()); 
	}

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNotEqualAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleNotEqualPlus
entryRuleNotEqualPlus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEqualPlusRule()); }
	 iv_ruleNotEqualPlus=ruleNotEqualPlus 
	 { $current=$iv_ruleNotEqualPlus.current; } 
	 EOF 
;

// Rule NotEqualPlus
ruleNotEqualPlus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='notequalplus' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotEqualPlusAccess().getNotequalplusKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotEqualPlusAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualPlusRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getNotEqualPlusAccess().getVar1VariableCrossReference_2_0()); 
	}

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNotEqualPlusAccess().getCommaKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualPlusRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getNotEqualPlusAccess().getVar2VariableCrossReference_4_0()); 
	}

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNotEqualPlusAccess().getCommaKeyword_5());
    }
(
(
		lv_range_6_0=RULE_INT
		{
			newLeafNode(lv_range_6_0, grammarAccess.getNotEqualPlusAccess().getRangeINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualPlusRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"range",
        		lv_range_6_0, 
        		"INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNotEqualPlusAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleNotEqualMinus
entryRuleNotEqualMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEqualMinusRule()); }
	 iv_ruleNotEqualMinus=ruleNotEqualMinus 
	 { $current=$iv_ruleNotEqualMinus.current; } 
	 EOF 
;

// Rule NotEqualMinus
ruleNotEqualMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='notequalminus' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotEqualMinusAccess().getNotequalminusKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotEqualMinusAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualMinusRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getNotEqualMinusAccess().getVar1VariableCrossReference_2_0()); 
	}

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNotEqualMinusAccess().getCommaKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualMinusRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getNotEqualMinusAccess().getVar2VariableCrossReference_4_0()); 
	}

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNotEqualMinusAccess().getCommaKeyword_5());
    }
(
(
		lv_range_6_0=RULE_INT
		{
			newLeafNode(lv_range_6_0, grammarAccess.getNotEqualMinusAccess().getRangeINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotEqualMinusRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"range",
        		lv_range_6_0, 
        		"INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNotEqualMinusAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleShowAll
entryRuleShowAll returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShowAllRule()); }
	 iv_ruleShowAll=ruleShowAll 
	 { $current=$iv_ruleShowAll.current; } 
	 EOF 
;

// Rule ShowAll
ruleShowAll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='showall' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShowAllAccess().getShowallKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getShowAllAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_range_2_0=RULE_BOOLEAN
		{
			newLeafNode(lv_range_2_0, grammarAccess.getShowAllAccess().getRangeBOOLEANTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShowAllRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"BOOLEAN");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getShowAllAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleLog
entryRuleLog returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogRule()); }
	 iv_ruleLog=ruleLog 
	 { $current=$iv_ruleLog.current; } 
	 EOF 
;

// Rule Log
ruleLog returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='log' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLogAccess().getLogKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_str_2_0=RULE_STRING
		{
			newLeafNode(lv_str_2_0, grammarAccess.getLogAccess().getStrSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"str",
        		lv_str_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLogAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSolve
entryRuleSolve returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSolveRule()); }
	 iv_ruleSolve=ruleSolve 
	 { $current=$iv_ruleSolve.current; } 
	 EOF 
;

// Rule Solve
ruleSolve returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='solve' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSolveAccess().getSolveKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSolveAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_range_2_0=RULE_BOOLEAN
		{
			newLeafNode(lv_range_2_0, grammarAccess.getSolveAccess().getRangeBOOLEANTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSolveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"BOOLEAN");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSolveAccess().getRightParenthesisKeyword_3());
    }
)
;





RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


