/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.myDsl.Equal;
import org.xtext.example.mydsl.myDsl.EqualMinus;
import org.xtext.example.mydsl.myDsl.EqualPlus;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NotEqual;
import org.xtext.example.mydsl.myDsl.NotEqualMinus;
import org.xtext.example.mydsl.myDsl.NotEqualPlus;
import org.xtext.example.mydsl.myDsl.Types;
import org.xtext.example.mydsl.myDsl.Variable;
import org.xtext.example.mydsl.validation.AbstractMyDslValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class MyDslValidator extends AbstractMyDslValidator {
  public final static String DUPLICATE_NAME = "duplicateName";
  
  public final static String DUPLICATE_VAR = "duplicatevariable";
  
  @Check
  public void checkDuplicateVarName(final Model m) {
    HashMap<String, Variable> map = new HashMap<String, Variable>();
    EList<Types> _elements = m.getElements();
    for (final Types v : _elements) {
      if ((v instanceof Variable)) {
        String nameVar = ((Variable) v).getName();
        boolean _containsKey = map.containsKey(nameVar);
        if (_containsKey) {
          this.error("Duplicate Variable name", v, 
            MyDslPackage.Literals.VARIABLE__NAME, 
            MyDslValidator.DUPLICATE_NAME);
          Variable _get = map.get(nameVar);
          this.error("Duplicate Variable name", _get, 
            MyDslPackage.Literals.VARIABLE__NAME, 
            MyDslValidator.DUPLICATE_NAME);
        } else {
          map.put(nameVar, ((Variable)v));
        }
      } else {
        if ((v instanceof Equal)) {
          Variable _var1 = ((Equal) v).getVar1();
          Variable _var2 = ((Equal) v).getVar2();
          boolean _equals = Objects.equal(_var1, _var2);
          if (_equals) {
            this.error("Same Variable used", v, 
              MyDslPackage.Literals.EQUAL__VAR1, 
              MyDslValidator.DUPLICATE_VAR);
          }
        } else {
          if ((v instanceof NotEqual)) {
            Variable _var1_1 = ((NotEqual) v).getVar1();
            Variable _var2_1 = ((NotEqual) v).getVar2();
            boolean _equals_1 = Objects.equal(_var1_1, _var2_1);
            if (_equals_1) {
              this.error("Same Variable used", v, 
                MyDslPackage.Literals.NOT_EQUAL__VAR1, 
                MyDslValidator.DUPLICATE_VAR);
            }
          } else {
            if ((v instanceof EqualPlus)) {
              Variable _var1_2 = ((EqualPlus) v).getVar1();
              Variable _var2_2 = ((EqualPlus) v).getVar2();
              boolean _equals_2 = Objects.equal(_var1_2, _var2_2);
              if (_equals_2) {
                this.error("Same Variable used", v, 
                  MyDslPackage.Literals.EQUAL_PLUS__VAR1, 
                  MyDslValidator.DUPLICATE_VAR);
              }
            } else {
              if ((v instanceof NotEqualPlus)) {
                Variable _var1_3 = ((NotEqualPlus) v).getVar1();
                Variable _var2_3 = ((NotEqualPlus) v).getVar2();
                boolean _equals_3 = Objects.equal(_var1_3, _var2_3);
                if (_equals_3) {
                  this.error("Same Variable used", v, 
                    MyDslPackage.Literals.NOT_EQUAL_PLUS__VAR1, 
                    MyDslValidator.DUPLICATE_VAR);
                }
              } else {
                if ((v instanceof EqualMinus)) {
                  Variable _var1_4 = ((EqualMinus) v).getVar1();
                  Variable _var2_4 = ((EqualMinus) v).getVar2();
                  boolean _equals_4 = Objects.equal(_var1_4, _var2_4);
                  if (_equals_4) {
                    this.error("Same Variable used", v, 
                      MyDslPackage.Literals.EQUAL_MINUS__VAR1, 
                      MyDslValidator.DUPLICATE_VAR);
                  }
                } else {
                  if ((v instanceof NotEqualMinus)) {
                    Variable _var1_5 = ((NotEqualMinus) v).getVar1();
                    Variable _var2_5 = ((NotEqualMinus) v).getVar2();
                    boolean _equals_5 = Objects.equal(_var1_5, _var2_5);
                    if (_equals_5) {
                      this.error("Same Variable used", v, 
                        MyDslPackage.Literals.NOT_EQUAL_MINUS__VAR1, 
                        MyDslValidator.DUPLICATE_VAR);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
